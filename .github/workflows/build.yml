name: Build

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
    paths-ignore: [ '**/README.md' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Generate the sqlx-data.json file so the jobs below can build "offline"
  sqlx-prepare:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: tumblepub_dev
          POSTGRES_PASSWORD: mysecretpassword
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.target/sqlx
          key: ${{ runner.os }}-sqlx-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-sqlx-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-sqlx-
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Set up database and build data
        env:
          CARGO_TARGET_DIR: ~/.target/sqlx
          DATABASE_URL: "postgres://postgres:mysecretpassword@localhost/tumblepub_dev"
        run: |
          cargo install sqlx-cli --no-default-features --features postgres
          cargo sqlx migrate run
          cargo sqlx prepare --merged
      - name: Upload sqlx-data.json
        uses: actions/upload-artifact@v2
        with:
          name: sqlx-data
          path: ./sqlx-data.json

  test:
    needs: sqlx-prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-
      - uses: actions/download-artifact@v2
        with:
          name: sqlx-data
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Build and test
        env:
          SQLX_OFFLINE: "true"
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --workspace

  # Push image to GitHub Container Repository.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: sqlx-data
      - name: Configure Docker metadata
        id: metadata
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/tumblepub
            ghcr.io/${{ github.repository_owner }}/tumblepub
          tags: |
            type=edge,branch=main
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log into Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Log into GitHub Container Repository
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Build & push image
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ./
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.metadata.outputs.tags }}
